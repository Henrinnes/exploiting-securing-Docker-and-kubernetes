import anbxj.*;
import java.security.SignedObject;
import java.util.Scanner;

public class masternode {

	private static String host_server = "10.1.16.13";
	private static int port = 6631;
	private static String usage = "USAGE: java masternode [client|server]";
	
	private static String keystorepath = "keystore/";
		
	public static void main(String[] args) {
		
		Channel_Properties cp;
		Channel_Settings cs;
		Crypto_KeyStoreSettings_Map kss;
		AnB_Crypto_Wrapper anb;
				
		switch (args.length) {
		case 1:
			AnBx_Debug.setAppname(masternode.class.toString() + "-" + args[0]);
			AnBx_Debug.setALL(true);
			if (args[0].equalsIgnoreCase("client"))
			{
		
				kss = new Crypto_KeyStoreSettings_Map(keystorepath, "alice"); 
				cs = new Channel_Settings(Channel_Roles.CLIENT, host_server,port);
				anb = new AnB_Crypto_Wrapper(kss);
				cp = new Channel_Properties(cs);
				new Client_04(anb,cp);
			}
			else
				if (args[0].equalsIgnoreCase("server"))
				{
					kss = new Crypto_KeyStoreSettings_Map(keystorepath, "bob"); 
					cs = new Channel_Settings(Channel_Roles.SERVER, host_server,port);
					anb = new AnB_Crypto_Wrapper(kss);
					cp = new Channel_Properties(cs);
					new Server_04(anb,cp);
				}	
				else
					System.out.println(usage);
			break;
		default:
			System.out.println(usage);
		}
	}
}
class Client_04 {
	
	public Client_04(AnB_Crypto_Wrapper anb, Channel_Properties cp) {
		super();
		
		SignedObject signedmsg; 
		Scanner scanner = new Scanner(System.in);
		Channel_Abstraction c = Channel.setup(cp);
		
		c.Open();
		String msg = (String) c.Receive();
		System.out.println(msg);
		msg = scanner.nextLine();
		c.Send(msg);
		msg = (String) c.Receive();
		System.out.println(msg);
		msg = scanner.nextLine();
		signedmsg = anb.sign(msg);
		c.Send(signedmsg);
		msg = (String) c.Receive();
		System.out.println(msg);
		c.Close();
		scanner.close();
	}
}

class Server_04 {
	
	public Server_04(AnB_Crypto_Wrapper anb, Channel_Properties cp) {
		super();
		String name; 
		Channel_Abstraction s = Channel.setup(cp);
		do {
		s.Open();
		String msg = new String("Hello! What's your name?");
		s.Send(msg);
		name = (String) s.Receive();
		s.Send("Hi " + name + "! Please sign this message:\n" + anb.getName() + "," + anb.getTimeStamp().toString() + "\nCut&Paste and press<ENTER>");
		msg = (String) anb.verify((SignedObject) s.Receive(),name);
		if (anb.aliasExists(name)) {
                                s.Send(anb.encrypt(new String("Hi " + "! This message is only for you"), name));
                        } else {
                                s.Send(new String("Sorry " + name + ", I can't send you a secrete message"));
                        }
		if (msg.equals(null))
			s.Send("I am sorry " + name  + ", I am unable to verify your signature");
		else
			s.Send("Thank you " + name + ", your signature has been verified\nYour message was: " + msg);
		System.out.println(msg);
		s.Close();
		} while (true);
	}
}
