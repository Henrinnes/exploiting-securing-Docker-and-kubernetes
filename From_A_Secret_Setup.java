package from_a_secret;

import anbxj.AnB_Crypto_Wrapper;
import anbxj.AnBx_Debug;
import anbxj.AnBx_Layers;
import anbxj.Crypto_Config;
import anbxj.Crypto_KeyStoreSettings_Map;

import java.util.Properties;
import java.io.IOException;
import java.io.InputStream;

import java.security.KeyPair;
import java.security.PublicKey;
import java.security.SignedObject;
import javax.crypto.SealedObject;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;

public class From_A_Secret_Setup {

	// default values - overridden by command line parameters!
	private static String usage = "USAGE: java PreShared_Setup [-verbose] [-silent] [-f configfilename]";
	private static String configFileName = "From_A_Secret.properties";
	final static AnBx_Layers layer = AnBx_Layers.APPLICATION;
	private static String keypath = null;
	private static String sharepath = null;
	private static String myAlias = null;

	public static void main(String[] args) {

		long start = System.currentTimeMillis();
		
		int i = 0;
		String arg = null;
		boolean vflag = false;

		AnBx_Debug.setAppname("From_A_Secret");
		
		AnBx_Debug.setAPPLICATION(true);
		AnBx_Debug.setPROTOCOL(true);
		// AnBx_Debug.setSESSION(true);
		// AnBx_Debug.setLANGUAGE(true);
		// AnBx_Debug.setENCRYPTION(true);
		// AnBx_Debug.setBUSINESS_LOGIC(true);
		AnBx_Debug.setALL(true); // true only for testing speed
				
		while (i < args.length && args[i].startsWith("-")) {
			arg = args[i++];

			// check for "wordy" arguments
			if (arg.equals("-info")) {
				// ignore other flags and just print information about the crypto system
				AnB_Crypto_Wrapper.getInfo();
				System.exit(0);
			}
			else			
			if (arg.equals("-verbose")) {
				AnBx_Debug.out(layer, "Verbose mode on");
				vflag = true;
				AnBx_Debug.setALL(vflag);
			}
			else
			if (arg.equals("-silent")) {
				AnBx_Debug.out(layer, "Silent mode on");
				vflag = false;
				AnBx_Debug.setALL(vflag);
			}
			// check for arguments that require params
			else
			if (arg.equals("-f")) {
				if (i < args.length)
					configFileName = args[i++];
                else
                    System.err.println("-f requires a filename");
			}
			i++;
		}	

        if (i == args.length)
            System.err.println(usage);
        else
        	{
		
				Properties configFile = new Properties();
				// Read properties file.
				AnBx_Debug.out(layer, "Reading config file: " + configFileName.toString());
				InputStream propertiesStream = From_A_Secret_Setup.class.getResourceAsStream(configFileName);
				if (propertiesStream != null) {
				  try {
					configFile.load(propertiesStream);
				} catch (IOException e) {
					AnBx_Debug.out(layer, "Error reading config file: " + configFileName.toString());
		            e.printStackTrace();
				}
				} else {
				  // Properties file not found!
					AnBx_Debug.out(layer, "Config file not found: " + configFileName.toString());
					System.exit(0);
				}
			
				myAlias = configFile.getProperty(configFile.getProperty("ROLESHARE"));
				keypath = configFile.getProperty("keypath");
				sharepath = configFile.getProperty("sharepath");
				
				AnB_Crypto_Wrapper s;
				Crypto_KeyStoreSettings_Map kssd = new Crypto_KeyStoreSettings_Map(keypath, myAlias);
				s = new AnB_Crypto_Wrapper(kssd,new Crypto_Config(configFile));
		
				// create shared knowledge objects
				
				
        		try {
					propertiesStream.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				long end = System.currentTimeMillis();		
				System.out.println("From_A_Secret_Setup - Execution time was "+(end-start)+" ms.");
        	}
        }
}
