import anbxj
from java.security import SignedObject

class Client_04:
    def __init__(self, anb, cp):
        signedmsg = None
        scanner = Scanner(System.in)
        c = Channel.setup(cp)
        
        c.Open()
        msg = c.Receive()
        print(msg)
        msg = input()
        c.Send(msg)
        msg = c.Receive()
        print(msg)
        msg = input()
        signedmsg = anb.sign(msg)
        c.Send(signedmsg)
        msg = c.Receive()
        print(msg)
        c.Close()
        scanner.close()

class Server_04:
    def __init__(self, anb, cp):
        name = None
        s = Channel.setup(cp)
        while True:
            s.Open()
            msg = "Hello! What's your name?"
            s.Send(msg)
            name = s.Receive()
            s.Send("Hi " + name + "! Please sign this message:\n" + anb.getName() + "," + str(anb.getTimeStamp().toString()) + "\nCut&Paste and press<ENTER>")
            received_signed_msg = s.Receive()
            msg = anb.verify(SignedObject(received_signed_msg, name))
            if anb.aliasExists(name):
                s.Send(anb.encrypt("Hi " + name + "! This message is only for you", name))
            else:
                s.Send("Sorry " + name + ", I can't send you a secret message")
            if msg is None:
                s.Send("I am sorry " + name + ", I am unable to verify your signature")
            else:
                s.Send("Thank you " + name + ", your signature has been verified\nYour message was: " + msg)
            print(msg)
            s.Close()

def main(args):
    host_server = "10.1.16.13"
    port = 6631
    usage = "USAGE: python masternode.py [client|server]"
    keystorepath = "keystore/"

    cp = None
    cs = None
    kss = None
    anb = None

    if len(args) == 2:
        anbxj.AnBx_Debug.setAppname(masternode.__name__ + "-" + args[1])
        anbxj.AnBx_Debug.setALL(True)

        if args[1].lower() == "client":
            kss = anbxj.Crypto_KeyStoreSettings_Map(keystorepath, "alice")
            cs = anbxj.Channel_Settings(anbxj.Channel_Roles.CLIENT, host_server, port)
            anb = anbxj.AnB_Crypto_Wrapper(kss)
            cp = anbxj.Channel_Properties(cs)
            Client_04(anb, cp)
        elif args[1].lower() == "server":
            kss = anbxj.Crypto_KeyStoreSettings_Map(keystorepath, "bob")
            cs = anbxj.Channel_Settings(anbxj.Channel_Roles.SERVER, host_server, port)
            anb = anbxj.AnB_Crypto_Wrapper(kss)
            cp = anbxj.Channel_Properties(cs)
            Server_04(anb, cp)
        else:
            print(usage)
    else:
        print(usage)

if __name__ == "__main__":
    import sys
    main(sys.argv)
